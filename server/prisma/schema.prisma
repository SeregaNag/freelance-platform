datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  pending
  waiting_confirmation
  in_progress
  completed
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Message {
  id    String @id @default(uuid())
  content   String
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt DateTime @default(now())
  status    MessageStatus @default(SENT)
}

model OrderApplication {
  id          String   @id @default(uuid())
  message     String?
  status      ApplicationStatus @default(pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  freelancerId String
  freelancer   User    @relation("FreelancerApplications", fields: [freelancerId], references: [id])
}

model Order {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  status      OrderStatus @default(pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  category    String?    // Категория заказа
  deadline    DateTime?  // Срок выполнения
  skills      String[]   // Требуемые навыки
  minBudget   Float?     // Минимальный бюджет
  maxBudget   Float?     // Максимальный бюджет
  attachments String[]   // Файлы/вложения
  rating      Float?     // Рейтинг после завершения
  review      String?    // Отзыв после завершения 

  customerId  String
  customer    User     @relation("CustomerOrders", fields: [customerId], references: [id])
  freelancerId String? 
  freelancer   User?    @relation("FreelancerOrders", fields: [freelancerId], references: [id])
  messages    Message[]
  applications OrderApplication[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  roles     String[] @default([]) // можно хранить роли, например, ["customer", "freelancer"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar    String?
  bio       String?
  skills    String[]
  experience String?
  rating    Float    @default(0)
  completedOrders Int @default(0)
  location  String?
  website   String?
  socialLinks Json?  // { github: string, linkedin: string, etc. }
  isVerified Boolean @default(false)
  lastSeen  DateTime @default(now())

  customerOrders   Order[] @relation("CustomerOrders")
  freelancerOrders Order[] @relation("FreelancerOrders")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  applications     OrderApplication[] @relation("FreelancerApplications")
}