datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  pending
  waiting_confirmation
  in_progress
  completed
}

model Message {
  id    String @id @default(uuid())
  content   String
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

model Order {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  status      OrderStatus @default(pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customerId  String
  customer    User     @relation("CustomerOrders", fields: [customerId], references: [id])
  
  freelancerId String? 
  freelancer   User?    @relation("FreelancerOrders", fields: [freelancerId], references: [id])

  messages    Message[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  roles     String[] @default([]) // можно хранить роли, например, ["customer", "freelancer"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerOrders   Order[] @relation("CustomerOrders")
  freelancerOrders Order[] @relation("FreelancerOrders")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}